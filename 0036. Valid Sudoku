/*
Developer   - Sriram Venkata Krishna
Date        - 30-08-2025
Platform    - Leet Code
*/

//0036. Valid Sudoku

class Solution 
{
    public:
        bool isValidSudoku(vector<vector<char>>& Board) 
        {
            bool Valid = true;

            vector<int> Check (9, 0);
            vector<int> Temp (9, 0);

            if(Valid == true) 
            {
                for(int X = 0; X < 9; X++)
                {
                    Temp = Check;

                    for(int Y = 0; Y < 9; Y++)
                    {
                        if(Board[X][Y] > '0')
                        {
                            if(Temp[Board[X][Y] - '1'] == 0)
                            {
                                Temp[Board[X][Y] - '1'] = 1;
                            }
                            else
                            {
                                Valid = false;
                                break;
                            }
                        }
                    }
                

                    if(Valid == false)
                    {
                        break;
                    }
                }
            }

            if(Valid == true) 
            {
                for(int Y = 0; Y < 9; Y++)
                {
                    Temp = Check;
                        
                    for(int X = 0; X < 9; X++)
                    {
                        if(Board[X][Y] > '0')
                        {
                            if(Temp[Board[X][Y] - '1'] == 0)
                            {
                                Temp[Board[X][Y] - '1'] = 1;
                            }
                            else
                            {
                                Valid = false;
                                break;
                            }
                        }
                    }

                    if(Valid == false)
                    {
                        break;
                    }
                }
            }

            if(Valid == true) 
            {
                for(int X = 0; X < 3; X++)
                {                        
                    for(int Y = 0; Y < 3; Y++)
                    {
                        Temp = Check;

                        for(int I = 0; I < 3; I++)
                        {
                            for(int J = 0; J < 3; J++)
                            {
                                if(Board[(3*X) + I][(3*Y) + J] > '0')
                                {
                                    if(Temp[Board[(3*X) + I][(3*Y) + J] - '1'] == 0)
                                    {
                                        Temp[Board[(3*X) + I][(3*Y) + J] - '1'] = 1;
                                    }
                                    else
                                    {
                                        Valid = false;
                                        break;
                                    }
                                }
                            }

                            if(Valid == false)
                            {
                                break;
                            }
                        }

                        if(Valid == false)
                        {
                            break;
                        }
                    }

                    if(Valid == false)
                    {
                        break;
                    }
                }
            }

            return Valid;
        }
};
